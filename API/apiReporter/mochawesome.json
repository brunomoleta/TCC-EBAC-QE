{
  "stats": {
    "suites": 10,
    "tests": 16,
    "passes": 12,
    "pending": 0,
    "failures": 4,
    "start": "2024-07-29T13:16:43.638Z",
    "end": "2024-07-29T13:16:46.841Z",
    "duration": 3203,
    "testsRegistered": 16,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "44b37a27-4727-4774-9c31-1e837ee8194c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7b1b9396-8d2a-433a-be00-4551942e7c77",
          "title": "Dado que você está fazendo um GET na rota de cupons da API",
          "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\getCoupons.spec.mjs",
          "file": "\\API\\tests\\getCoupons.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6863cfa4-2173-47a0-86d3-078b1949d6d5",
              "title": "Quando é feita uma requisição com autenticação e autorização",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\getCoupons.spec.mjs",
              "file": "\\API\\tests\\getCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é feita uma requisição com autenticação e autorização\"",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com autenticação e autorização \"before all\" hook in \"Quando é feita uma requisição com autenticação e autorização\"",
                  "timedOut": false,
                  "duration": 697,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(apiUrl)\n  .get(apiRoute)\n  .set(\"Authorization\", `Bearer ${token}`);",
                  "err": {},
                  "uuid": "5cf053e2-830b-4341-a71b-116fa5ad176e",
                  "parentUUID": "6863cfa4-2173-47a0-86d3-078b1949d6d5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar a lista dos cupons ativos.",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com autenticação e autorização Deve retornar a lista dos cupons ativos.",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.be.an(\"array\").that.is.not.empty;\njsonData.forEach((item) => {\n  expect(item).to.be.an(\"object\");\n  expect(item).to.have.property(\"id\");\n  expect(item.id).to.be.a(\"number\");\n  expect(item).to.have.property(\"code\");\n  expect(item.code).to.be.a(\"string\");\n  expect(item).to.have.property(\"amount\");\n  expect(item.amount).to.be.a(\"string\");\n  expect(item).to.have.property(\"description\");\n  expect(item.description).to.be.a(\"string\");\n  expect(item).to.have.property(\"discount_type\");\n  expect(item.discount_type).to.be.a(\"string\");\n});",
                  "err": {},
                  "uuid": "b2c0a8ea-d173-433f-9bf3-e4e70f20bcfd",
                  "parentUUID": "6863cfa4-2173-47a0-86d3-078b1949d6d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 200",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com autenticação e autorização Deve retornar status 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.status).to.equal(200);",
                  "err": {},
                  "uuid": "09972eb7-ff6d-4bb5-98cf-66dedf9bd522",
                  "parentUUID": "6863cfa4-2173-47a0-86d3-078b1949d6d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2c0a8ea-d173-433f-9bf3-e4e70f20bcfd",
                "09972eb7-ff6d-4bb5-98cf-66dedf9bd522"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9fe62e8-7e53-440a-a405-5e884855da7d",
              "title": "Quando é feita uma requisição sem token de autenticação",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\getCoupons.spec.mjs",
              "file": "\\API\\tests\\getCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é feita uma requisição sem token de autenticação\"",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição sem token de autenticação \"before all\" hook in \"Quando é feita uma requisição sem token de autenticação\"",
                  "timedOut": false,
                  "duration": 236,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!scenario.auth) {\n  response = await request(apiUrl).get(apiRoute);\n} else {\n  response = await request(apiUrl)\n    .get(apiRoute)\n    .set(\"Authorization\", `Bearer ${scenario.auth}`);\n}",
                  "err": {},
                  "uuid": "881ee4fe-a2ac-4db5-977a-3d7260a099de",
                  "parentUUID": "a9fe62e8-7e53-440a-a405-5e884855da7d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar uma mensagem de erro.",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição sem token de autenticação Deve retornar uma mensagem de erro.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(jsonData.message).to.be.a(\"string\");\nexpect(jsonData.message).to.eql(errorMessage);",
                  "err": {},
                  "uuid": "d00f6ab9-ad12-44eb-a6ab-b27ff62c64cb",
                  "parentUUID": "a9fe62e8-7e53-440a-a405-5e884855da7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 401",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição sem token de autenticação Deve retornar status 401",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.status).to.equal(scenario.errorCode);",
                  "err": {},
                  "uuid": "5d51f919-58d6-4998-bc56-3609ffb4aa27",
                  "parentUUID": "a9fe62e8-7e53-440a-a405-5e884855da7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d00f6ab9-ad12-44eb-a6ab-b27ff62c64cb",
                "5d51f919-58d6-4998-bc56-3609ffb4aa27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea387ed9-d67c-4cf7-8790-0facfd7dbb9f",
              "title": "Quando é feita uma requisição com token autenticado porém sem autorização",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\getCoupons.spec.mjs",
              "file": "\\API\\tests\\getCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é feita uma requisição com token autenticado porém sem autorização\"",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização \"before all\" hook in \"Quando é feita uma requisição com token autenticado porém sem autorização\"",
                  "timedOut": false,
                  "duration": 288,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!scenario.auth) {\n  response = await request(apiUrl).get(apiRoute);\n} else {\n  response = await request(apiUrl)\n    .get(apiRoute)\n    .set(\"Authorization\", `Bearer ${scenario.auth}`);\n}",
                  "err": {},
                  "uuid": "9a75109d-0e53-47a1-be6b-2112506e1d97",
                  "parentUUID": "ea387ed9-d67c-4cf7-8790-0facfd7dbb9f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar uma mensagem de erro.",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização Deve retornar uma mensagem de erro.",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(jsonData.message).to.be.a(\"string\");\nexpect(jsonData.message).to.eql(errorMessage);",
                  "err": {
                    "message": "AssertionError: expected '<strong>Erro</strong>: A senha inform…' to deeply equal 'Sem permissão para listar recursos.'",
                    "estack": "AssertionError: expected '<strong>Erro</strong>: A senha inform…' to deeply equal 'Sem permissão para listar recursos.'\n    at Context.<anonymous> (file:///D:/Users/Bruno/Documents/Development/Ebac/QA/M-34%20Trabalho%20Final/TCC-EBAC-QE/API/tests/getCoupons.spec.mjs:68:37)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": "- <strong>Erro</strong>: A senha informada para o usuário <strong>admin_ebac</strong> está incorreta. <a href=\"http://lojaebac.ebaconline.art.br/minha-conta/lost-password/\">Perdeu a senha?</a>\n+ Sem permissão para listar recursos.\n"
                  },
                  "uuid": "472ab954-f93e-48d1-be70-d93d9fbe63a1",
                  "parentUUID": "ea387ed9-d67c-4cf7-8790-0facfd7dbb9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 401",
                  "fullTitle": "Dado que você está fazendo um GET na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização Deve retornar status 401",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.status).to.equal(scenario.errorCode);",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 401",
                    "estack": "AssertionError: expected 500 to equal 401\n    at Context.<anonymous> (file:///D:/Users/Bruno/Documents/Development/Ebac/QA/M-34%20Trabalho%20Final/TCC-EBAC-QE/API/tests/getCoupons.spec.mjs:72:36)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": "- 500\n+ 401\n"
                  },
                  "uuid": "21c89c4e-9fe5-4732-9968-e09344e3bd70",
                  "parentUUID": "ea387ed9-d67c-4cf7-8790-0facfd7dbb9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "472ab954-f93e-48d1-be70-d93d9fbe63a1",
                "21c89c4e-9fe5-4732-9968-e09344e3bd70"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6eb5d76d-4ed3-4eb7-a942-a9149a751d01",
          "title": "Dado que você está fazendo um POST na rota de cupons da API",
          "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
          "file": "\\API\\tests\\postCoupons.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "efa788ca-8d0a-41de-bf07-f52781237871",
              "title": "Quando é enviado um corpo de requisição inválido",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
              "file": "\\API\\tests\\postCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é enviado um corpo de requisição inválido\"",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo de requisição inválido \"before all\" hook in \"Quando é enviado um corpo de requisição inválido\"",
                  "timedOut": false,
                  "duration": 270,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(apiUrl)\n  .post(apiRoute)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({});",
                  "err": {},
                  "uuid": "e5d65675-7d2e-41ff-ac2d-c6f49dd3aab7",
                  "parentUUID": "efa788ca-8d0a-41de-bf07-f52781237871",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar mensagem de erro que auxilie o cliente.",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo de requisição inválido Deve retornar mensagem de erro que auxilie o cliente.",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(typeof jsonData.message).to.eql(\"string\");\nexpect(jsonData.message).to.include(wrongBody);\nexpect(jsonData).to.have.property(\"data\");\nexpect(jsonData.data).to.have.property(\"params\");",
                  "err": {},
                  "uuid": "756a67df-8fcc-491e-b9bd-9d33bc441335",
                  "parentUUID": "efa788ca-8d0a-41de-bf07-f52781237871",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 400",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo de requisição inválido Deve retornar status 400",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.status).to.equal(400);",
                  "err": {},
                  "uuid": "ef1f65c9-3bca-4047-b6c0-d083a5ad2bca",
                  "parentUUID": "efa788ca-8d0a-41de-bf07-f52781237871",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "756a67df-8fcc-491e-b9bd-9d33bc441335",
                "ef1f65c9-3bca-4047-b6c0-d083a5ad2bca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cdd75055-e939-4d82-8b31-233820594917",
              "title": "Quando é enviado um corpo com um nome de código que já existe.",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
              "file": "\\API\\tests\\postCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é enviado um corpo com um nome de código que já existe.\"",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo com um nome de código que já existe. \"before all\" hook in \"Quando é enviado um corpo com um nome de código que já existe.\"",
                  "timedOut": false,
                  "duration": 281,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(apiUrl)\n  .post(apiRoute)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(existingCoupon);",
                  "err": {},
                  "uuid": "d77605cf-17fc-466c-a762-7de5ec98877d",
                  "parentUUID": "cdd75055-e939-4d82-8b31-233820594917",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar mensagem de erro",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo com um nome de código que já existe. Deve retornar mensagem de erro",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(jsonData.message).to.be.a(\"string\");\nexpect(jsonData.message).to.contain(invalidName);",
                  "err": {},
                  "uuid": "421ba60a-05f5-4885-b058-326b0b0714f9",
                  "parentUUID": "cdd75055-e939-4d82-8b31-233820594917",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 400",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é enviado um corpo com um nome de código que já existe. Deve retornar status 400",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "4b1a10ff-8637-4d52-9c15-8ffb4769e8b5",
                  "parentUUID": "cdd75055-e939-4d82-8b31-233820594917",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "421ba60a-05f5-4885-b058-326b0b0714f9",
                "4b1a10ff-8637-4d52-9c15-8ffb4769e8b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27189893-c737-4f6c-9828-d3415d8e8d15",
              "title": "Quando são enviados dados válidos com token autenticado",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
              "file": "\\API\\tests\\postCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando são enviados dados válidos com token autenticado\"",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando são enviados dados válidos com token autenticado \"before all\" hook in \"Quando são enviados dados válidos com token autenticado\"",
                  "timedOut": false,
                  "duration": 812,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(apiUrl)\n  .post(apiRoute)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(newCoupon);",
                  "err": {},
                  "uuid": "2fdcc1b8-61b7-4494-b7d3-f3370f918fef",
                  "parentUUID": "27189893-c737-4f6c-9828-d3415d8e8d15",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar o objeto com os itens esperados (CONTRATO).",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando são enviados dados válidos com token autenticado Deve retornar o objeto com os itens esperados (CONTRATO).",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"id\");\nexpect(jsonData.id).to.be.a(\"number\");\nexpect(jsonData).to.have.property(\"amount\");\nexpect(jsonData.amount).to.be.a(\"string\");\nexpect(jsonData).to.have.property(\"discount_type\");\nexpect(valid_discount_types).to.include(jsonData.discount_type);\nexpect(jsonData).to.have.property(\"description\");\nexpect(jsonData.description).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "59feff8b-9676-4d56-b1c0-c09f1f5a4e38",
                  "parentUUID": "27189893-c737-4f6c-9828-d3415d8e8d15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 201",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando são enviados dados válidos com token autenticado Deve retornar status 201",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "c291ca5b-f792-47e8-b400-a465457a9cae",
                  "parentUUID": "27189893-c737-4f6c-9828-d3415d8e8d15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59feff8b-9676-4d56-b1c0-c09f1f5a4e38",
                "c291ca5b-f792-47e8-b400-a465457a9cae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa6e22d8-0c0d-4135-b8a2-cc7383f2794b",
              "title": "Quando é feita uma requisição sem token de autenticação",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
              "file": "\\API\\tests\\postCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é feita uma requisição sem token de autenticação\"",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição sem token de autenticação \"before all\" hook in \"Quando é feita uma requisição sem token de autenticação\"",
                  "timedOut": false,
                  "duration": 290,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!scenario.auth) {\n  response = await request(apiUrl).get(apiRoute).send(newCoupon);\n} else {\n  response = await request(apiUrl)\n    .get(apiRoute)\n    .set(\"Authorization\", `Bearer ${scenario.auth}`)\n    .send(newCoupon);\n}",
                  "err": {},
                  "uuid": "c4f73908-bfaf-4257-be78-0f1f2879ff92",
                  "parentUUID": "fa6e22d8-0c0d-4135-b8a2-cc7383f2794b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar mensagem de erro que orienta o cliente",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição sem token de autenticação Deve retornar mensagem de erro que orienta o cliente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(jsonData.message).to.be.a(\"string\");\nexpect(jsonData.message).to.contain(noToken);",
                  "err": {},
                  "uuid": "80d24359-0961-4ca1-8a75-ead140b0b5b4",
                  "parentUUID": "fa6e22d8-0c0d-4135-b8a2-cc7383f2794b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 401",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição sem token de autenticação Deve retornar status 401",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(401);",
                  "err": {},
                  "uuid": "c1764d31-a1c3-4f04-b4ff-249b31fabf68",
                  "parentUUID": "fa6e22d8-0c0d-4135-b8a2-cc7383f2794b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80d24359-0961-4ca1-8a75-ead140b0b5b4",
                "c1764d31-a1c3-4f04-b4ff-249b31fabf68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1dd78b1f-48bd-48b7-ac88-2d9c61943b0b",
              "title": "Quando é feita uma requisição com token autenticado porém sem autorização",
              "fullFile": "D:\\Users\\Bruno\\Documents\\Development\\Ebac\\QA\\M-34 Trabalho Final\\TCC-EBAC-QE\\API\\tests\\postCoupons.spec.mjs",
              "file": "\\API\\tests\\postCoupons.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Quando é feita uma requisição com token autenticado porém sem autorização\"",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização \"before all\" hook in \"Quando é feita uma requisição com token autenticado porém sem autorização\"",
                  "timedOut": false,
                  "duration": 280,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!scenario.auth) {\n  response = await request(apiUrl).get(apiRoute).send(newCoupon);\n} else {\n  response = await request(apiUrl)\n    .get(apiRoute)\n    .set(\"Authorization\", `Bearer ${scenario.auth}`)\n    .send(newCoupon);\n}",
                  "err": {},
                  "uuid": "94995f47-39a8-4935-89a2-0689e45cb328",
                  "parentUUID": "1dd78b1f-48bd-48b7-ac88-2d9c61943b0b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar mensagem de erro que orienta o cliente",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização Deve retornar mensagem de erro que orienta o cliente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const jsonData = response.body;\nexpect(jsonData).to.have.property(\"message\");\nexpect(jsonData.message).to.be.a(\"string\");\nexpect(jsonData.message).to.contain(noToken);",
                  "err": {
                    "message": "AssertionError: expected '<strong>Erro</strong>: A senha inform…' to include 'Sem permissão para listar recursos.'",
                    "estack": "AssertionError: expected '<strong>Erro</strong>: A senha inform…' to include 'Sem permissão para listar recursos.'\n    at Context.<anonymous> (file:///D:/Users/Bruno/Documents/Development/Ebac/QA/M-34%20Trabalho%20Final/TCC-EBAC-QE/API/tests/postCoupons.spec.mjs:109:37)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": null
                  },
                  "uuid": "3e28637a-ab6f-40e1-8394-75c1214a765c",
                  "parentUUID": "1dd78b1f-48bd-48b7-ac88-2d9c61943b0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 401",
                  "fullTitle": "Dado que você está fazendo um POST na rota de cupons da API Quando é feita uma requisição com token autenticado porém sem autorização Deve retornar status 401",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(401);",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 401",
                    "estack": "AssertionError: expected 500 to equal 401\n    at Context.<anonymous> (file:///D:/Users/Bruno/Documents/Development/Ebac/QA/M-34%20Trabalho%20Final/TCC-EBAC-QE/API/tests/postCoupons.spec.mjs:112:40)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": "- 500\n+ 401\n"
                  },
                  "uuid": "4ec3494b-45b4-41da-a613-62787f04f39e",
                  "parentUUID": "1dd78b1f-48bd-48b7-ac88-2d9c61943b0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3e28637a-ab6f-40e1-8394-75c1214a765c",
                "4ec3494b-45b4-41da-a613-62787f04f39e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./API/apiReporter"
      },
      "version": "6.2.0"
    }
  }
}
